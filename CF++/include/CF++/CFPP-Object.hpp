/*******************************************************************************
 * Copyright (c) 2019, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @header      CFPP-Object.hpp
 * @copyright   (c) 2019 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ generic container for CF types
 */

#ifndef CFPP_OBJECT_H
#define CFPP_OBJECT_H

namespace CF
{
    template< typename _T_ >
    class CFPP_EXPORT Object: public Type
    {
        public:
            
            Object( void ): _cfObject( nullptr )
            {}
            
            Object( const Object< _T_ > & value ): _cfObject( nullptr )
            {
                if( value._cfObject != nullptr )
                {
                    this->_cfObject = reinterpret_cast< _T_ >( const_cast< void * >( CFRetain( value._cfObject ) ) );
                }
            }
            
            Object( const AutoPointer & value ): _cfObject( nullptr )
            {
                if( value.IsValid() )
                {
                    this->_cfObject = static_cast< _T_ >( const_cast< void * >( CFRetain( value ) ) );
                }
            }
            
            Object( _T_ value ): _cfObject( nullptr )
            {
                if( value != nullptr )
                {
                    this->_cfObject = reinterpret_cast< _T_ >( const_cast< void * >( CFRetain( value ) ) );
                }
            }
            
            Object( Object && value ) noexcept
            {
                this->_cfObject = value._cfObject;
                value._cfObject = nullptr;
            }
            
            virtual ~Object( void )
            {
                if( this->_cfObject != nullptr )
                {
                    CFRelease( this->_cfObject );
                    
                    this->_cfObject = nullptr;
                }
            }
            
            Object< _T_ > & operator = ( Object< _T_ > value )
            {
                swap( *( this ), value );
                
                return *( this );
            }
            
            Object< _T_ > & operator = ( const AutoPointer & value )
            {
                return operator =( Object< _T_ >( value ) );
            }
            
            Object< _T_ > & operator = ( _T_ value )
            {
                return operator =( Object< _T_ >( value ) );
            }
            
            virtual CFTypeID GetTypeID( void ) const
            {
                if( this->_cfObject != nullptr )
                {
                    return CFGetTypeID( this->_cfObject );
                }
                
                return 0;
            }
            
            virtual CFTypeRef GetCFObject( void ) const
            {
                return this->_cfObject;
            }
            
            friend void swap( Object< _T_ > & v1, Object< _T_ > & v2 ) noexcept
            {
                using std::swap;
                
                swap( v1._cfObject, v2._cfObject );
            }
            
        protected:
            
            _T_ _cfObject;
    };
}

#endif /* CFPP_OBJECT_H */
